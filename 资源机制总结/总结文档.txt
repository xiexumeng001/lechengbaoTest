包含三部分
	1、资源管理机制
	2、Ab包生成及热更机制
	3、自动打包工具

一、资源管理机制：
	逻辑设计：
		基础流程：通过包名与资源名称加载,加载Ab包时,检测依赖的AB包并把都加载出来,然后通过资源名称加载资源,如果资源是预制体,那么再实例化一个出来,放入对象池子

		Ab包的卸载机制:
			通过请求者,每次加载资源,都会传入请求者,用来标记该资源被哪些请求者占用
			当卸载时,把该资源的请求者去掉,然后看下该资源是否还被其他请求者占用,没有的话,就卸载该资源,继续看下该资源所在AB包是否被其他请求者占用,没有的话,就卸载这个AB包
			例子:
				一个UI界面内加载的所有资源,请求者都是这个UI界面对象,关闭时,只需要调用释放这个请求者的接口即可
				它会把这个请求者的记录清除,然后查看相关资源是否还有被占用,没有的话就把相关资源释放掉


		资源泄露检测：
			主要逻辑：
				维护一个资源请求记录,当调用卸载接口时,把对应的请求记录给去掉
				然后遍历请求记录,判断资源与请求者谁是空,有空的,那就代表没调用卸载接口,但是某一部分已经释放了
				代表有泄露了

				ps：请求者只能是GameObject,这样就可以判断是否是空了

	代码设计:
		ResourceMgr 是资源管理类,主要是资源初始化,资源加载,卸载等机制
			AssetBundleInfoNode 包含Bundle包资源,依赖Bundle信息,请求者的信息,加载出来的预制体资源的信息
			CloneanbleAssetNode 包含改资源实例化出来的所有预制体,相当于一个对象池子
			AssetClone 一个对象对应一个预制体,包含了当前请求者
			ResourceSafe 资源泄露检测机制

二、Ab包生成及热更机制：
	Ab包生成:
		逻辑设计：
			四种打包方式:
				将文件夹内的所有资源打成一个Ab包
				将文件夹内,一个子文件打一个AB包(UI界面,英雄文件夹等等常用)
				一个资源打一个Ab包(预制体常用)
				文件夹顶层的资源打一个AB包
			给个配置文件,配置打包规则即可
			打完写一个记录文件,记录所有的bundle包,MD5值,大小等等,还有版本号

		代码设计：
			Packager 打包逻辑
			PackageWindow 打包编译器
			PackagerRedundancyCheck Ab包资源重复检测(大部分能检测到)

	热更机制:
		逻辑设计:
			比对记录文件的MD5值,不一样的从下载下来
		代码设计:
			ResourcesChecker 是热更流程

三、自动打包工具：
	逻辑设计:
		需要设置什么参数,就写对应方法,调用U3D提供的对应接口
	代码设计:
		AutoBuild 是自动打包
		AutoOss 是自动热更